<?php

namespace App\Repository;

use App\Entity\Address;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * CustomerRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class AddressRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Address::class);
    }

    /**
     * @param int $id
     *
     * @return Address
     */
    public function findById(int $id)
    {
        $address = null;

        try {
            $address = $this
                ->createQueryBuilder('address')
                ->select(['address'])
                ->where('address.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getSingleResult();

        } catch (NoResultException $e) {
            throw new NotFoundHttpException('Not Found');
        } catch (NonUniqueResultException $e) {
        }

        return $address;
    }

    public function getAddressList()
    {
        return $this->createQueryBuilder('address')
            ->getQuery()
            ->getArrayResult();

    }

    public function update(Address $addressModel)
    {
        $address = $this->findById($addressModel->getId());

        $address->setCompany($addressModel->getCompany());
        $address->setAlias($addressModel->getAlias());
        $address->setAddress1($addressModel->getAddress1());
        $address->setAddress2($addressModel->getAddress2());
        $address->setLastname($addressModel->getLastname());
        $address->setFirstname($addressModel->getFirstname());
        $address->setCity($addressModel->getCity());
        $address->setPostcode($addressModel->getPostcode());
        $address->setPhone($addressModel->getPhone());
        $address->setPhoneMobile($addressModel->getPhoneMobile());
        $address->setDni($addressModel->getDni());
        $address->setDeleted($addressModel->getDeleted());


        $this->_em->flush();

    }
}
