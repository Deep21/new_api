<?php

namespace App\Repository;

use App\Entity\Customer;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * CustomerRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Customer::class);
    }

    /**
     * @param int $id
     *
     * @return Customer
     */
    public function getCustomerById(int $id)
    {
        try {
            return $this->createQueryBuilder('c')
                ->select(['c'])
                ->where('c.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getSingleResult();
        } catch (NoResultException $e) {
            throw new NotFoundHttpException('Not Found');
        } catch (NonUniqueResultException $e) {
        }

        return null;
    }

    public function updateCustomer(Customer $customer)
    {
        $this->createQueryBuilder('c')
            ->update()
            ->set('c.ape', ':ape')
            ->set('c.siret', ':siret')
            ->set('c.birthday', ':birthday')
            ->set('c.company', ':company')
            ->set('c.email', ':email')
            ->set('c.lastname', ':lastname')
            ->set('c.firstname', ':firstname')
            ->where('c.id = :id')
            ->setParameters(
                [
                'id' => $customer->getId(),
                'ape' => $customer->getApe(),
                'siret' => $customer->getSiret(),
                'birthday' => $customer->getBirthday(),
                'company' => $customer->getCompany(),
                'email' => $customer->getEmail(),
                'lastname' => $customer->getLastname(),
                'firstname' => $customer->getFirstname(),
                ]
            )
            ->getQuery()
            ->execute();
    }

    /**
     * @return array
     */
    public function getCustomers()
    {
        $c = $this->createQueryBuilder('c')
            ->select(['c, o'])
            ->leftJoin('c.order', 'o')
            ->getQuery()
            ->getArrayResult();

        return $c;
    }

    /**
     * @param int $id
     *
     * @return mixed
     */
    public function countCustomer(int $id)
    {
        try {
            return (int) $this->createQueryBuilder('c')
                ->select('COUNT(c.id)')
                ->where('c.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
        }

        return null;
    }
}
